log4j.rootLogger=error, stderr

# Set up logging to include a file record of the output
# Note: the file is always created, even if there is 
# no actual output.
# log4j.rootLogger=info, stderr, R



log4j.additivity.de.unima.alcomox.ontology=false
log4j.logger.de.unima.alcomox.ontology=error, stderrnf

log4j.additivity.de.unima.alcomox.algorithms=false
log4j.logger.de.unima.alcomox.algorithms=error, stderrnf


#log4j.additivity.de.unima.alcomox.experiments=true
#log4j.logger.de.unima.alcomox.experiments=info, stdoutnf



# Log format to standard out
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.target=System.out
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%5p [%t] (%F:%L) - %m%n


# Log format for algorithms
log4j.appender.stdoutnf=org.apache.log4j.ConsoleAppender
log4j.appender.stdoutnf.target=System.out
log4j.appender.stdoutnf.layout=org.apache.log4j.PatternLayout
log4j.appender.stdoutnf.layout.ConversionPattern=%m

# Log format to standard error
log4j.appender.stderr=org.apache.log4j.ConsoleAppender
log4j.appender.stderr.target=System.err
log4j.appender.stderr.layout=org.apache.log4j.PatternLayout
log4j.appender.stderr.layout.ConversionPattern=%5p [%t] (%F:%L) - %m%n

# Log format for algorithms
log4j.appender.stderrnf=org.apache.log4j.ConsoleAppender
log4j.appender.stderrnf.target=System.err
log4j.appender.stderrnf.layout=org.apache.log4j.PatternLayout
log4j.appender.stderrnf.layout.ConversionPattern=%m

# File based log output
# log4j.appender.R=org.apache.log4j.RollingFileAppender
# log4j.appender.R.File=log/logfile.log
# log4j.appender.R.MaxFileSize=5000KB
# log4j.appender.R.layout=org.apache.log4j.PatternLayout
# log4j.appender.R.layout.ConversionPattern=%m