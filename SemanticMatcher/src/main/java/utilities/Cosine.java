package utilities;

import java.util.ArrayList;

/**
 * @author audunvennesland
 * 29. sep. 2017 
 */
public class Cosine {
	
	public static double cosineSimilarity(double[] vectorA, double[] vectorB) {
		
		
	    double dotProduct = 0.0;
	    double normA = 0.0;
	    double normB = 0.0;
	    double tempSim = 0.0;
	    double finalSim = 0.0;
	    
	    for (int i = 0; i < vectorA.length; i++) {
	        dotProduct += vectorA[i] * vectorB[i];
	        normA += Math.pow(vectorA[i], 2);
	        normB += Math.pow(vectorB[i], 2);
	    }   
	    tempSim = dotProduct / (Math.sqrt(normA) * Math.sqrt(normB));
	    
	    if (tempSim < 0) {
	    	finalSim = 0;
	    } else if (tempSim > 1.0) {
	    	finalSim = 1.0;
	    } else {
	    	finalSim = tempSim;
	    }
	    
	    return finalSim;
	}
	
	public static double cosineSimilarity(ArrayList<Double> vectorAList, ArrayList<Double> vectorBList) {
		
		double[] vectorA = new double[vectorAList.size()];
		double[] vectorB = new double[vectorBList.size()];
		
		for (int i = 0; i < vectorA.length; i++) {
			vectorA[i] = vectorAList.get(i);
		}
		
		for (int i = 0; i < vectorB.length; i++) {
			vectorB[i] = vectorBList.get(i);
		}
		
		double dotProduct = 0.0;
	    double normA = 0.0;
	    double normB = 0.0;
	    double tempSim = 0.0;
	    double finalSim = 0.0;
	    
	    for (int i = 0; i < vectorA.length; i++) {
	        dotProduct += vectorA[i] * vectorB[i];
	        normA += Math.pow(vectorA[i], 2);
	        normB += Math.pow(vectorB[i], 2);
	    }   
	    tempSim = dotProduct / (Math.sqrt(normA) * Math.sqrt(normB));
	    
	    if (tempSim < 0) {
	    	finalSim = 0;
	    } else if (tempSim > 1.0) {
	    	finalSim = 1.0;
	    } else {
	    	finalSim = tempSim;
	    }
	    
	    return finalSim;
		
	}
	
	
	
	public static void main(String[] args) {
		
		
		
		String atmonto_airspacelayer = "-0.661372 0.337937 0.035314 0.503833 0.020833 0.116685 0.222863 7.43E-4 0.098463 -0.217914 0.165973 -0.065141 0.221554 0.194024 -0.174838 0.015669 0.373737 -0.157035 0.018724 -0.034507 0.096588 0.262829 0.134115 0.069173 -0.104768 0.143319 -0.393677 -0.037994 0.157174 -0.082022 0.02194 -0.043824 0.081736 -0.081259 0.091881 -0.00387 0.110316 0.186525 -0.059148 0.416432 0.247515 0.013398 -0.269201 0.044501 0.319096 -0.147086 -0.050255 -0.249808 -0.106858 -0.238911 0.310796 0.375361 0.169411 0.076392 0.117994 -0.033396 0.051911 -0.150337 0.257371 0.277954 -0.202489 0.290289 -0.258072 0.211838 -0.023408 0.149697 -0.0076 0.156519 0.044893 0.391623 0.15164 -0.025743 0.081813 -0.073939 -0.061691 -0.070876 0.196029 -0.037018 -0.068058 0.140569 0.02525 0.264062 -0.096919 0.103086 0.122987 0.186935 -0.042564 0.051448 -0.23012 -0.236857 0.023573 0.070954 -0.022418 0.090355 0.076796 -0.013221 -0.149778 0.029328 0.141589 0.325071 -0.128685 -0.391865 -0.102822 0.203527 -0.01432 -0.107698 -0.098278 0.271232 0.190363 -0.150309 -0.038149 0.181231 0.103462 -0.182574 -0.19716 0.02146 0.095272 0.231968 0.037243 -0.068336 0.043584 -0.024457 0.065007 -0.125966 -0.073098 -0.09184 -0.029201 -0.167931 0.01654 0.086934 -0.023286 0.136958 -0.083791 0.087263 -0.057847 -0.166925 -0.220537 -0.019292 0.077241 -0.111727 -0.121242 -0.123796 0.054741 0.112345 0.032302 0.18191 0.128067 0.03034 0.307369 -0.169913 0.113981 -0.006803 0.260702 0.114607 0.090928 -0.08065 -0.123027 0.433381 -0.018179 0.199203 -0.043672 0.099971 -0.291643 0.102203 0.392975 -0.033845 0.050023 0.006164 0.006223 -0.060403 0.240734 -0.158045 -0.038881 0.100185 0.091409 0.12301 0.061602 0.32839 0.08031 0.086691 0.282311 0.193902 0.178415 -0.185946 0.112963 8.77E-4 -0.280104 0.04161 0.102441 -0.083141 -0.353666 0.250103 0.020555 0.064701 0.124042 0.291638 -0.166122 -0.119103 0.149074 -0.036226 0.032427 -0.520303 0.204959 0.284759 0.287119 0.087911 0.297489 0.049714 -0.462378 0.253035 0.132255 -0.02194 0.106228 0.079993 -0.12039 -0.149189 0.044379 -0.091789 -0.322615 -0.001378 -0.06991 -0.021091 -0.024334 -0.087071 0.064805 -0.319964 -0.201839 -0.464638 0.021718 0.007839 0.053166 -0.213904 -0.095726 0.335919 0.07092 0.14548 0.008957 0.082207 -0.013965 -0.107605 -0.157991 0.09153 0.129554 -0.147494 -0.38093 0.060821 0.017011 0.133276 -0.038705 -0.254301 -0.173246 -0.132258 0.286747 -0.113861 0.089901 0.151194 -0.113733 -0.190432 0.002213 0.106641 0.198315 0.012165 -0.09117 -0.094219 -0.191931 0.029048 -0.125853 -0.27443 -0.037899 0.139982 -0.182431 0.277502 -0.029913 0.131233 0.111695 0.024118 -0.113288 -0.259191 -0.044892 0.11407 -0.238235 0.113153 -0.102931 0.038244 -0.192639 0.052492 0.037522 -0.20617 0.01306 -0.131672 0.207716 0.265327 0.24085 0.201563 0.072163 0.175533 0.046193 0.200724 0.157644 -0.174405"; 
		String airm_airspacelayer = "-0.523159 0.181553 0.04673 0.153772 0.189742 0.058535 0.290575 0.449068 0.06505 -0.059941 -0.080297 0.117172 -0.138175 0.021933 0.068359 0.347681 0.289419 0.175328 -0.060392 -0.001953 0.171371 0.199289 0.170439 0.302886 0.075641 0.351947 0.005145 0.354589 0.088676 -0.014343 0.118229 -0.069828 0.009309 0.096051 0.268479 0.17825 -0.165377 0.07238 -0.190288 0.162362 0.290861 0.289856 -0.067733 -0.039063 0.179543 0.113393 -0.021933 0.012461 -0.002585 -0.205578 0.082266 0.272776 0.096685 0.103696 0.318723 -0.104595 0.408195 0.099976 0.401272 0.29361 0.218882 0.20958 0.146435 0.351393 0.147554 0.129047 0.093645 -0.043325 -0.063307 0.208644 -0.039362 0.259159 0.045058 0.031173 0.180535 0.085032 0.149657 0.05714 0.148172 0.167828 0.058299 0.119427 0.127677 0.28503 0.018756 0.098679 0.214188 0.229223 -0.092666 -0.011839 -0.201841 -0.149437 0.070392 0.228088 0.014277 0.230677 -0.126798 0.121307 0.28186 0.089388 -0.057787 -0.064935 0.248424 0.191883 -0.021008 0.279887 0.2398 -0.006247 0.125343 -0.0284 0.09818 -0.058386 6.21E-4 0.083118 0.07798 0.07888 0.26273 0.148824 0.051771 0.036044 -0.309403 0.005593 0.070377 0.055793 -0.142251 -0.149209 0.132009 0.057601 -0.079663 0.053499 -0.003687 -0.076241 0.005876 -0.008672 -0.125791 0.078882 0.111984 0.167133 -0.102529 0.164151 -0.045975 0.171289 0.228655 0.152622 0.085404 0.005327 0.076835 0.216571 0.191378 0.099183 0.116699 0.17565 -0.004771 -0.103572 0.274026 0.046842 0.057974 0.120698 -0.097448 0.217785 -0.0813 0.067772 0.059052 -0.040695 0.334695 -0.050822 -0.046769 -0.167545 -0.213705 0.092723 0.18504 -0.052238 -0.06808 0.105656 0.314599 0.143353 0.043153 0.20617 0.259748 0.072526 0.221518 0.189112 0.223573 -0.024725 0.058034 0.085606 -0.268249 -0.037447 0.101883 -0.053538 -0.038056 0.237851 0.14224 0.036967 -0.297324 0.203991 -0.111461 0.067105 0.07637 -0.013935 0.101171 -0.175857 0.42341 0.321321 0.089587 -0.035061 0.201311 0.012159 -0.013623 0.216073 0.230963 -0.074689 7.7E-5 0.060025 -0.0318 -0.055403 -0.092581 -0.106173 -0.099294 -0.043546 -0.11398 0.028057 0.078119 0.144031 -0.022767 0.107916 0.09747 -0.058062 0.104986 0.040868 -0.17069 -0.024586 0.062907 -0.024195 0.121276 0.032672 0.001668 0.160257 -0.023349 0.003563 0.29845 -0.06755 -0.031176 0.185272 -0.085125 0.006488 0.251931 0.071703 0.087996 -0.017011 0.142856 0.073213 0.221073 -0.09849 0.198356 0.105805 -0.003746 -0.067499 0.24079 0.03892 0.177909 0.269948 -0.002733 -0.266948 0.152318 0.139609 -0.006868 0.003177 -0.065055 0.188345 0.155777 -0.061193 -0.009588 0.212617 -0.111871 0.23068 0.032892 -0.034518 -0.057236 -0.022229 0.10511 0.145157 -0.119612 0.024368 -0.298156 0.241381 0.142125 0.175514 0.208623 0.109956 0.130006 -0.045769 0.199053 0.114721 0.005091 0.098741 0.03639 0.06025 0.178455 0.01772";
		
		String[] atmonto_airspacelayer_array = atmonto_airspacelayer.split(" ");
		String[] airm_airspacelayer_array = airm_airspacelayer.split(" ");
		
		System.out.println("The size of softcopy array is " + atmonto_airspacelayer_array.length);
		System.out.println("The size of article array is " + airm_airspacelayer_array .length);
		
		double[] vecA = new double[atmonto_airspacelayer_array.length];
		double[] vecB = new double[airm_airspacelayer_array.length];
		
		for (int i = 0; i < atmonto_airspacelayer_array.length; i++) {
			vecA[i] = Double.parseDouble(atmonto_airspacelayer_array[i]);
		}
		
		for (int i = 0; i < airm_airspacelayer_array.length; i++) {
			vecB[i] = Double.parseDouble(airm_airspacelayer_array[i]);
		}
		
		
		double cos_sim = cosineSimilarity(vecA, vecB);
		System.out.println("The cosine similarity is " + cos_sim);
	}

}
